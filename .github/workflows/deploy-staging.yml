name: Deploy Lambda (staging)

on:
  push:
    branches: [ "main" ]       # trigger only on pushes to main branch
    paths:
      - "backend/"           # only run if backend changes
      - ".github/workflows/deploy-staging.yml"

permissions:
  id-token: write               # required for OIDC â†’ AWS
  contents: read

concurrency:
  group: lambda-staging         # prevent overlapping runs
  cancel-in-progress: true

jobs:
  deploy:
    environment: staging        # this is your GitHub Environment "staging"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('backend/requirements.txt') }}

      - name: Build artifact (zip backend/)
        run: |
          cd backend
          rm -rf build ../function.zip
          mkdir -p build
          # Install dependencies into build/
          if [ -f requirements.txt ]; then pip install -r requirements.txt -t build; fi
          # Copy entrypoint and other files
          cp -r lambda_function.py build/ || true
          cp -r handler.py build/ || true
          [ -f app.py ] && cp app.py build/
          [ -f db.py ] && cp db.py build/
          [ -f eye_multiclass_model.pkl ] && cp eye_multiclass_model.pkl build/
          [ -f le_gender.pkl ] && cp le_gender.pkl build/
          [ -f Model1_Iteration1.py ] && cp Model1_Iteration1.py build/
          [ -d src ] && cp -r src/* build/
          # Create zip at repo root
          cd build && zip -r ../../function.zip . && cd ../..

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Update function code
        run: |
          aws lambda update-function-code \
            --function-name "${{ vars.LAMBDA_FUNCTION_NAME }}" \
            --zip-file fileb://function.zip

      - name: Publish new version
        id: pub
        run: |
          OUT=$(aws lambda publish-version \
            --function-name "${{ vars.LAMBDA_FUNCTION_NAME }}" \
            --description "commit $GITHUB_SHA on $GITHUB_REF_NAME")
          VERSION=$(echo "$OUT" | jq -r '.Version')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Point alias to new version (create if missing)
        run: |
          ALIAS="${{ vars.ALIAS_NAME }}"   # should be "Staging" in GitHub env vars
          FN="${{ vars.LAMBDA_FUNCTION_NAME }}"
          VER="${{ steps.pub.outputs.version }}"
          aws lambda update-alias --function-name "$FN" --name "$ALIAS" --function-version "$VER" \
          || aws lambda create-alias --function-name "$FN" --name "$ALIAS" --function-version "$VER"

      - name: Smoke test (optional)
        if: ${{ vars.API_BASE != '' }}
        run: |
          set -e
          URL="${{ vars.API_BASE }}/health"
          echo "Testing $URL"
          for i in {1..6}; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            if [ "$CODE" = "200" ]; then echo " Healthy"; exit 0; fi
            echo "Attempt $i failed ($CODE)... retrying"
            sleep 5
          done
          echo "Smoke test failed"
          exit 1